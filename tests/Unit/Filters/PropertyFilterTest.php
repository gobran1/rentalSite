<?php

namespace Tests\Unit\Filters;

use App\Filters\PropertyFilter;
use App\Models\Property;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Tests\TestCase;


class PropertyFilterTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $property1 = Property::factory()->create(
            [
                'monthly_rent' => 1000,
                'bedrooms' => 1,
                'bathrooms' => 1,
                'rental_period_in_months' => 16,
                'pets_allowed' => true
            ]);

        $property1->pets()->create([
            'type' => 'dogs'
        ]);

        Property::factory()->create([
            'monthly_rent' => 3000,
            'bedrooms' => 3,
            'bathrooms' => 2,
            'rental_period_in_months' => 32,
        ]);
    }


    /**
     * @test
     */
    public function testLeaseLengthFilterWithShortTerm()
    {

        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'lease_length' => 'short_term'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);
        $this->assertEquals($result->first()['rental_period_in_months'], 16);
    }


    /**
     * @test
     */
    public function testLeaseLengthFilterWithLongTerm()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'lease_length' => 'lOng_teRm'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);
        $this->assertEquals($result->first()['rental_period_in_months'], 32);
    }

    /**
     * @test
     */
    public function testLeaseLengthFilterWithUndefinedTerm()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'lease_length' => 'unDefinedTerm'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(2, $result);
    }


    /**
     * @test
     */
    public function petsFilterTest()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'pets' => ['dogs']
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);

        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'pets' => ['cats']
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(0, $result);
    }

    /**
     * @test
     */
    public function testbedRoomsFilter()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'bedrooms' => '1'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);

        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'bedrooms' => '2+'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);
    }


    /**
     * @test
     */
    public function testBathRoomsFilter()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'bathrooms' => '1'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);

        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'bathrooms' => '1+'
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(2, $result);
    }

    /**
     * @test
     */
    public function testPriceFilter()
    {
        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'price' => [500, 1500]
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(1, $result);

        $filter = new PropertyFilter(new Request(
            [
                'filters' => [
                    'price' => [500, 3000]
                ]
            ]
        ));
        $result = $filter->apply(Property::query())->get();
        $this->assertCount(2, $result);
    }

}
